{"version":3,"sources":["../src/react-spoon.jsx"],"names":["React","require","ReactDom","UrlPattern","URL_STATE_DELIM","getWindowHash","hash","window","location","replace","split","matchRoute","routePath","pattern","match","objectsAreEqual","a","b","prop","hasOwnProperty","SpoonContextProvider","router","props","children","childContextTypes","PropTypes","object","ReactSpoon","routes","opts","goToName","name","params","route","namedRoutes","path","stringify","state","currentParams","Error","onRouteChanged","loadStateFromUrl","changeRoute","domId","providers","currentRouteHierarchy","currentHierarchyProps","activeRoutes","go","buildLink","link","setupRoutes","routeTree","forEach","it","handler","wrappedComponent","contextTypes","any","addEventListener","changes","i","length","onLeave","routeHierarchy","routeParams","activeRoute","checkRoute","depth","redirectTo","toRoute","push","component","rhLength","providerProps","reduce","result","next","combinedProps","createElement","key","provider","onEnter","render","document","getElementById","urlState","stateString","stringAfter","href","JSON","parse","err","console","error","str","delim","indexOf","substring","stringBefore","Link","onClick","event","defaultPrevented","context","to","toName","target","preventDefault","isActive","checkIfActive","replaceUrlStateInUrl","realHref","stateHref","history","replaceState","storeState","value","getState"],"mappings":"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","file":"react-spoon.js","sourcesContent":["/**\n * Created by iyobo on 2017-03-21.\n */\nimport {Component} from 'react';\n\nvar React = require('react');\nvar ReactDom = require('react-dom');\nvar UrlPattern = require('url-pattern');\n\nconst URL_STATE_DELIM = '@';\n\nfunction getWindowHash() {\n    let hash = window.location.hash.replace(/^#\\/?|\\/$/g, '');\n\n    //Do not include state\n    hash = hash.split(URL_STATE_DELIM)[0];\n\n    //console.log('hash:', hash);\n    return hash;\n}\n\n/**\n * If pattern match, return map of params.\n * @param routePath\n * @param location\n */\nfunction matchRoute(routePath, location) {\n    //console.log( 'checking', routePath, 'with location',location);\n\n    //This matcher is dumb and doesn't accept empty strings\n    if (routePath === '' && location === '') {\n        return {}; //match as empty string\n    }\n    else if (routePath !== '') {\n\n        const pattern = new UrlPattern(routePath);\n        return pattern.match(location);\n    }\n    else {\n        return null;\n    }\n}\n\nfunction objectsAreEqual(a, b) {\n    for (var prop in a) {\n        if (a.hasOwnProperty(prop)) {\n            if (b.hasOwnProperty(prop)) {\n                if (typeof a[prop] === 'object') {\n                    if (!objectsAreEqual(a[prop], b[prop])) return false;\n                } else {\n                    if (a[prop] !== b[prop]) return false;\n                }\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * Routing context\n */\nclass SpoonContextProvider extends Component {\n    static childContextTypes = {\n        router: React.PropTypes.object\n    };\n\n    getChildContext() {\n        return { router: this.props.router };\n    }\n\n    render() {\n        return <div id=\"spoonContextProvider\"> {this.props.children}</div>;\n    }\n}\n\n\nexport class ReactSpoon {\n\n    /**\n     *\n     * @param routes\n     * @param opts\n     * @param opts.domId\n     * @param opts.providers\n     */\n    constructor(routes, opts = {}) {\n\n        this.domId = opts.domId || 'app';\n        this.routes = routes;\n        this.namedRoutes = {};\n\n        //Providers\n        //this.providerEl = opts.provider;\n        //this.providerProps = opts.providerProps;\n\n        this.providers = opts.providers || [];\n\n\n        this.currentRouteHierarchy = null;\n        this.currentHierarchyProps = {};\n\n        this.state = {\n            router: {\n                location: getWindowHash(),\n                activeRoutes: {},\n                go: (name = '', params = {}, opts = {}) => {\n                    const route = this.namedRoutes[name];\n                    if (route) {\n\n                        let path = route.path;\n\n                        const pattern = new UrlPattern(path);\n\n                        window.location.hash = '/' + pattern.stringify(params);\n\n                        this.state.router.currentParams = params;\n                    } else {\n                        throw new Error('Unknown route name: ' + name);\n                    }\n                },\n                buildLink: (name, params) => {\n\n                    const route = this.namedRoutes[name];\n                    let link = '#/';\n                    if (route) {\n                        const pattern = new UrlPattern(route.path);\n                        link = '#/' + pattern.stringify(params);\n                    }\n\n                    //console.log('creating link', name, params, link)\n\n                    return link;\n                },\n                currentParams: {}\n            }\n        };\n\n\n        //console.log('RouteState:', this.state);\n\n        const setupRoutes = (routeTree) => {\n            routeTree.forEach((it) => {\n\n                /**\n                 * Register names\n                 */\n                if (it.name)\n                    this.namedRoutes[it.name] = it;\n\n                /**\n                 * Create context\n                 */\n                if (it.handler) {\n                    (it.handler.wrappedComponent || it.handler).contextTypes = {\n                        router: React.PropTypes.any\n                    };\n                }\n\n                if (it.children) {\n                    setupRoutes(it.children)\n                }\n\n\n            });\n        }\n\n        setupRoutes(this.routes);\n\n\n        this.onRouteChanged();\n\n        // Handle browser navigation events\n        window.addEventListener('hashchange', this.onRouteChanged, false);\n    }\n\n    goToName = (name = '', params = {}, opts = {}) => {\n        const route = this.namedRoutes[name];\n        if (route) {\n\n            let path = route.path;\n\n            const pattern = new UrlPattern(path);\n\n\n            window.location.hash = '/' + pattern.stringify(params);\n\n            this.state.router.currentParams = params;\n        } else {\n            throw new Error('Unknown route name: ' + name);\n        }\n    }\n\n\n    /**\n     *\n     * @param changes\n     * @param changes.location - pure hash of current window url\n     */\n    changeRoute(changes) {\n\n        /***\n         * First thing to do on route change is to call onLeave on all active routes' handler components, from last to first.\n         */\n        if (this.currentRouteHierarchy) {\n\n            for (let i = this.currentRouteHierarchy.length - 1; i >= 0; i--) {\n                const it = this.currentRouteHierarchy[i];\n\n                if ((it.handler.wrappedComponent || it.handler).onLeave) {\n                    it.handler.wrappedComponent.onLeave(this.currentHierarchyProps);\n                }\n\n            }\n        }\n\n\n        this.state = { router: { ...this.state.router, ...changes, activeRoutes: {} } };\n\n        var routeHierarchy = [];\n        //this.state.router.activeRoutes = {};\n\n        var routeParams = null;\n        var activeRoute = null;\n\n        const checkRoute = (routes, location, depth) => {\n            for (let i in routes) {\n                const route = routes[i];\n\n                routeParams = matchRoute(route.path, location);\n\n                //console.log(route.name, '(', route.path, ')', ' --> ', routeParams);\n                if (routeParams) {\n                    //The route is a match\n                    this.state.router.currentParams = routeParams;\n\n                    //are we supposed to redirect?\n                    if (route.redirectTo) {\n                        const toRoute = this.namedRoutes[route.redirectTo];\n\n                        //console.log('redirecting to ' + toRoute.path);\n                        //TODO: Add redirect wih params option\n                        window.location.hash = '/' + toRoute.path;\n\n                        return;\n                    }\n\n                    /**\n                     * This is an active route node\n                     */\n                    activeRoute = route;\n                    routeHierarchy.push(activeRoute);\n\n                    if (activeRoute.name) {\n                        this.state.router.activeRoutes[activeRoute.name] = activeRoute;\n                    }\n\n\n                    /**\n                     * Okay now lets check if this route has children\n                     */\n                    if (activeRoute.children) {\n\n                        //check the children too\n                        checkRoute(activeRoute.children, location, i);\n                    }\n\n                    break;\n                }\n            }\n        };\n\n        //loop through routes and output the right match\n        checkRoute(this.routes, this.state.router.location, 0);\n\n\n        var component;\n        /**\n         * Build component hierarchy from route hierarchy.\n         */\n        const rhLength = routeHierarchy.length;\n\n        //Determine the combined props, which is a merger of all the props in this router instance\n        const providerProps = this.providers.reduce((result, next) => {\n            return { ...result, ...next.props }\n        }, {});\n\n        const combinedProps = { ...this.state, ...routeParams, ...providerProps };\n\n\n        for (let i = rhLength - 1; i >= 0; i--) {\n\n            const route = routeHierarchy[i];\n            const handler = route.handler;\n\n            if (component) {\n                component = React.createElement(handler, { ...combinedProps, key: 'route' + i }, [component]);\n                //React.createElement(route.handler, props, [component]);\n            } else {\n                /**\n                 * Nested 404s\n                 * If the last item in the route hierarchy has a children field, then this is obviously a nested 404\n                 */\n                if (i === rhLength - 1 && route.children) {\n                    component = React.createElement(handler, { ...combinedProps, key: 'route' + i }, [<h1\n                        key=\"page404\">404\n                        Nothing\n                        Here</h1>]);\n                } else {\n                    //component = <handler {...props}></handler>;\n                    component = React.createElement(handler, { ...combinedProps, key: 'route' + i });\n                }\n            }\n\n        }\n\n        //Wrap with Given provider elements e.g. Mobx, muitheme etc\n        for (let i = this.providers.length - 1; i >= 0; i--) {\n            const provider = this.providers[i];\n            //console.log(provider)\n            component = React.createElement(provider.component, provider.props || {}, component);\n        }\n\n        //Wrap with Routing context\n        component = React.createElement(SpoonContextProvider, this.state, component);\n\n        /**\n         * generic 404\n         */\n        if (!component) {\n            component = <h1 key=\"page404\">404 Nothing Here</h1>;\n        }\n\n        /**\n         * Hooks\n         * Run all static onEnters in the handlers.\n         */\n        routeHierarchy.forEach((it) => {\n\n            if ((it.handler.wrappedComponent || it.handler).onEnter) {\n                it.handler.wrappedComponent.onEnter(combinedProps);\n            }\n        });\n\n\n        /**\n         * At this point, this is the current route hierarchy\n         *\n         */\n        this.currentRouteHierarchy = routeHierarchy;\n        this.currentHierarchyProps = combinedProps;\n\n        ReactDom.render(component, document.getElementById(this.domId));\n    }\n\n    /**\n     * Extract the url state and load it.\n     * Url state is a json string of everything after the very first @ of window.location.href\n     */\n    loadStateFromUrl() {\n\n        /**\n         * AGAIN, the purpose of URLState is not to store persistent state, but rather to DISPLAY a URL that better matches your page's current/reproducable state...reproducability that you define.\n         * @type {{}}\n         */\n        urlState = {};\n\n        //console.log(window.location.href)\n        const stateString = stringAfter(window.location.href, URL_STATE_DELIM);\n\n        if (!stateString) {\n            //console.log('no url state to extract');\n            return;\n        }\n\n        try {\n            urlState = JSON.parse(stateString);\n            //console.log('State pulled from URL', urlState)\n        } catch (err) {\n            console.error('Error loading data from state',err, stateString)\n        }\n    }\n\n    onRouteChanged = () => {\n        //console.log('route changing')\n\n        //First load URL state\n        this.loadStateFromUrl();\n\n        //Now navigate\n        this.changeRoute({ location: getWindowHash() });\n\n\n    }\n\n}\n\nfunction stringAfter(str, delim) {\n    if (str.indexOf(URL_STATE_DELIM) > -1) {\n        return str.substring(str.indexOf(delim) + 1);\n    }\n    else {\n        return null;\n    }\n}\n\nfunction stringBefore(str, delim) {\n    return str.split(delim)[0];\n}\n\n/**\n *\n */\nexport class Link extends Component {\n\n    constructor() {\n\n        super();\n        this.state = {};\n\n\n    }\n\n    static contextTypes = {\n        router: React.PropTypes.object\n    };\n\n    /**\n     * Upon creating a link, we need to attach it to a route.\n     * We must find the best route that matches it's 'to's\n     */\n    componentWillMount() {\n        var router = this.context.router;\n\n        if (!router) {\n            throw new Error('You are trying to define a <Link> outside of a Laddle Router context. link: ' + this.props.to || this.props.toName)\n        }\n\n        //build href for this link\n\n        this.href = this.props.toName ? router.buildLink(this.props.toName, this.props.params) : this.props.to || '#/';\n\n    }\n\n    /**\n     * Not used! Links will now build hrefs on Mount insead of per-click. Performance boost.\n     * @param event\n     */\n    onClick = (event) => {\n        if (this.props.onClick) this.props.onClick(event);\n\n        if (event.defaultPrevented) return;\n\n        var router = this.context.router;\n\n        if (!router) {\n            throw new Error('You are trying to use a <Link> outside of a Laddle Router context. Link: ' + this.props.to || this.props.toName)\n        }\n\n        //!router ? process.env.NODE_ENV !== 'production' ? invariant(false, '<Link>s rendered outside of a router context cannot navigate.') : invariant(false) : void 0;\n\n        //if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;\n\n        // If target prop is set (e.g. to \"_blank\"), let browser handle link.\n        /* istanbul ignore if: untestable with Karma */\n        if (this.props.target) return;\n\n        event.preventDefault();\n\n        //router.push(resolveToLocation(this.props.to, router));\n\n        if (this.props.to) {\n            window.location.hash = '#' + this.props.to;\n        } else if (this.props.toName) {\n            router.go(this.props.toName, this.props.params);\n        }\n\n    }\n\n    checkIfActive() {\n        this.isActive = false;\n\n        //console.log(this.props.to || this.props.toName, 'this params', this.props.params, ' current route params', this.context.router.currentParams, this.context.router.activeRoutes);\n\n        ////The basic requirement for being active is that a toName prop exists\n        //const basicRequirement = !!this.props.activeClassName;\n        //\n        ////Next, t\n\n        if (this.props.toName && this.context.router.activeRoutes[this.props.toName] && objectsAreEqual(this.props.params, this.context.router.currentParams)) {\n            //console.log(this.props.to || this.props.toName, 'is active')\n            //console.log(this.props.to || this.props.toName,'this params', this.props.params, ' last params', this.context.router.currentParams)\n            this.isActive = true;\n        }\n    }\n\n    //componentWillUpdate() {\n    //    this.checkIfActive();\n    //}\n\n    render() {\n        this.checkIfActive();\n\n        return (\n            <a href={this.href}\n               className={this.isActive ? 'active' : ''}>\n                {this.props.children}\n            </a>\n        );\n    }\n}\n\n// querySync feature\nlet urlState = {};\n\n/**\n * Only works if pushState is supported\n */\nfunction replaceUrlStateInUrl() {\n\n    const realHref = stringBefore(window.location.href, URL_STATE_DELIM);\n    const stateHref = realHref + URL_STATE_DELIM + JSON.stringify(urlState);\n\n    window.history.replaceState(null, null, stateHref);\n}\n\nexport const storeState = (key, value) => {\n    if (value) {\n        //console.log('storing url state', key, value);\n        urlState[key] = value;\n    }\n    else if (urlState[key]) {\n        //pass in null value to wipe key:val from urlState\n        delete urlState[key];\n    }\n\n    replaceUrlStateInUrl();\n}\nexport const getState = (key) => {\n    return urlState[key]\n\n}"]}